// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/storage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageApiClient is the client API for StorageApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageApiClient interface {
	UpdateWorkspace(ctx context.Context, in *Workspace, opts ...grpc.CallOption) (*Workspace, error)
	UpdateApplication(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Application, error)
	UpdateWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error)
	UpdateEnvironment(ctx context.Context, in *Environment, opts ...grpc.CallOption) (*Environment, error)
	UpdateDeploymentTarget(ctx context.Context, in *DeploymentTarget, opts ...grpc.CallOption) (*DeploymentTarget, error)
	UpdateWorkloadVersion(ctx context.Context, in *WorkloadVersion, opts ...grpc.CallOption) (*WorkloadVersion, error)
	UpdateDeploymentAssignment(ctx context.Context, in *DeploymentAssignment, opts ...grpc.CallOption) (*DeploymentAssignment, error)
	UpdateHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	UpdateReconciler(ctx context.Context, in *Reconciler, opts ...grpc.CallOption) (*Reconciler, error)
	UpdateDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Deployment, error)
	GetDeploymentTarget(ctx context.Context, in *DeploymentTargetSearch, opts ...grpc.CallOption) (*DeploymentTarget, error)
	GetDeploymentState(ctx context.Context, in *DeploymentStateRequest, opts ...grpc.CallOption) (*DeploymentState, error)
}

type storageApiClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageApiClient(cc grpc.ClientConnInterface) StorageApiClient {
	return &storageApiClient{cc}
}

func (c *storageApiClient) UpdateWorkspace(ctx context.Context, in *Workspace, opts ...grpc.CallOption) (*Workspace, error) {
	out := new(Workspace)
	err := c.cc.Invoke(ctx, "/proto.StorageApi/UpdateWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageApiClient) UpdateApplication(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/proto.StorageApi/UpdateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageApiClient) UpdateWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error) {
	out := new(Workload)
	err := c.cc.Invoke(ctx, "/proto.StorageApi/UpdateWorkload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageApiClient) UpdateEnvironment(ctx context.Context, in *Environment, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, "/proto.StorageApi/UpdateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageApiClient) UpdateDeploymentTarget(ctx context.Context, in *DeploymentTarget, opts ...grpc.CallOption) (*DeploymentTarget, error) {
	out := new(DeploymentTarget)
	err := c.cc.Invoke(ctx, "/proto.StorageApi/UpdateDeploymentTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageApiClient) UpdateWorkloadVersion(ctx context.Context, in *WorkloadVersion, opts ...grpc.CallOption) (*WorkloadVersion, error) {
	out := new(WorkloadVersion)
	err := c.cc.Invoke(ctx, "/proto.StorageApi/UpdateWorkloadVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageApiClient) UpdateDeploymentAssignment(ctx context.Context, in *DeploymentAssignment, opts ...grpc.CallOption) (*DeploymentAssignment, error) {
	out := new(DeploymentAssignment)
	err := c.cc.Invoke(ctx, "/proto.StorageApi/UpdateDeploymentAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageApiClient) UpdateHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := c.cc.Invoke(ctx, "/proto.StorageApi/UpdateHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageApiClient) UpdateReconciler(ctx context.Context, in *Reconciler, opts ...grpc.CallOption) (*Reconciler, error) {
	out := new(Reconciler)
	err := c.cc.Invoke(ctx, "/proto.StorageApi/UpdateReconciler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageApiClient) UpdateDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, "/proto.StorageApi/UpdateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageApiClient) GetDeploymentTarget(ctx context.Context, in *DeploymentTargetSearch, opts ...grpc.CallOption) (*DeploymentTarget, error) {
	out := new(DeploymentTarget)
	err := c.cc.Invoke(ctx, "/proto.StorageApi/GetDeploymentTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageApiClient) GetDeploymentState(ctx context.Context, in *DeploymentStateRequest, opts ...grpc.CallOption) (*DeploymentState, error) {
	out := new(DeploymentState)
	err := c.cc.Invoke(ctx, "/proto.StorageApi/GetDeploymentState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageApiServer is the server API for StorageApi service.
// All implementations must embed UnimplementedStorageApiServer
// for forward compatibility
type StorageApiServer interface {
	UpdateWorkspace(context.Context, *Workspace) (*Workspace, error)
	UpdateApplication(context.Context, *Application) (*Application, error)
	UpdateWorkload(context.Context, *Workload) (*Workload, error)
	UpdateEnvironment(context.Context, *Environment) (*Environment, error)
	UpdateDeploymentTarget(context.Context, *DeploymentTarget) (*DeploymentTarget, error)
	UpdateWorkloadVersion(context.Context, *WorkloadVersion) (*WorkloadVersion, error)
	UpdateDeploymentAssignment(context.Context, *DeploymentAssignment) (*DeploymentAssignment, error)
	UpdateHost(context.Context, *Host) (*Host, error)
	UpdateReconciler(context.Context, *Reconciler) (*Reconciler, error)
	UpdateDeployment(context.Context, *Deployment) (*Deployment, error)
	GetDeploymentTarget(context.Context, *DeploymentTargetSearch) (*DeploymentTarget, error)
	GetDeploymentState(context.Context, *DeploymentStateRequest) (*DeploymentState, error)
	mustEmbedUnimplementedStorageApiServer()
}

// UnimplementedStorageApiServer must be embedded to have forward compatible implementations.
type UnimplementedStorageApiServer struct {
}

func (UnimplementedStorageApiServer) UpdateWorkspace(context.Context, *Workspace) (*Workspace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkspace not implemented")
}
func (UnimplementedStorageApiServer) UpdateApplication(context.Context, *Application) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (UnimplementedStorageApiServer) UpdateWorkload(context.Context, *Workload) (*Workload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkload not implemented")
}
func (UnimplementedStorageApiServer) UpdateEnvironment(context.Context, *Environment) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironment not implemented")
}
func (UnimplementedStorageApiServer) UpdateDeploymentTarget(context.Context, *DeploymentTarget) (*DeploymentTarget, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeploymentTarget not implemented")
}
func (UnimplementedStorageApiServer) UpdateWorkloadVersion(context.Context, *WorkloadVersion) (*WorkloadVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkloadVersion not implemented")
}
func (UnimplementedStorageApiServer) UpdateDeploymentAssignment(context.Context, *DeploymentAssignment) (*DeploymentAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeploymentAssignment not implemented")
}
func (UnimplementedStorageApiServer) UpdateHost(context.Context, *Host) (*Host, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHost not implemented")
}
func (UnimplementedStorageApiServer) UpdateReconciler(context.Context, *Reconciler) (*Reconciler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReconciler not implemented")
}
func (UnimplementedStorageApiServer) UpdateDeployment(context.Context, *Deployment) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeployment not implemented")
}
func (UnimplementedStorageApiServer) GetDeploymentTarget(context.Context, *DeploymentTargetSearch) (*DeploymentTarget, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentTarget not implemented")
}
func (UnimplementedStorageApiServer) GetDeploymentState(context.Context, *DeploymentStateRequest) (*DeploymentState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentState not implemented")
}
func (UnimplementedStorageApiServer) mustEmbedUnimplementedStorageApiServer() {}

// UnsafeStorageApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageApiServer will
// result in compilation errors.
type UnsafeStorageApiServer interface {
	mustEmbedUnimplementedStorageApiServer()
}

func RegisterStorageApiServer(s grpc.ServiceRegistrar, srv StorageApiServer) {
	s.RegisterService(&StorageApi_ServiceDesc, srv)
}

func _StorageApi_UpdateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageApiServer).UpdateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageApi/UpdateWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageApiServer).UpdateWorkspace(ctx, req.(*Workspace))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageApi_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Application)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageApiServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageApi/UpdateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageApiServer).UpdateApplication(ctx, req.(*Application))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageApi_UpdateWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageApiServer).UpdateWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageApi/UpdateWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageApiServer).UpdateWorkload(ctx, req.(*Workload))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageApi_UpdateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageApiServer).UpdateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageApi/UpdateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageApiServer).UpdateEnvironment(ctx, req.(*Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageApi_UpdateDeploymentTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageApiServer).UpdateDeploymentTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageApi/UpdateDeploymentTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageApiServer).UpdateDeploymentTarget(ctx, req.(*DeploymentTarget))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageApi_UpdateWorkloadVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageApiServer).UpdateWorkloadVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageApi/UpdateWorkloadVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageApiServer).UpdateWorkloadVersion(ctx, req.(*WorkloadVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageApi_UpdateDeploymentAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentAssignment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageApiServer).UpdateDeploymentAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageApi/UpdateDeploymentAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageApiServer).UpdateDeploymentAssignment(ctx, req.(*DeploymentAssignment))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageApi_UpdateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageApiServer).UpdateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageApi/UpdateHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageApiServer).UpdateHost(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageApi_UpdateReconciler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reconciler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageApiServer).UpdateReconciler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageApi/UpdateReconciler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageApiServer).UpdateReconciler(ctx, req.(*Reconciler))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageApi_UpdateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageApiServer).UpdateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageApi/UpdateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageApiServer).UpdateDeployment(ctx, req.(*Deployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageApi_GetDeploymentTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentTargetSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageApiServer).GetDeploymentTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageApi/GetDeploymentTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageApiServer).GetDeploymentTarget(ctx, req.(*DeploymentTargetSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageApi_GetDeploymentState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageApiServer).GetDeploymentState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StorageApi/GetDeploymentState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageApiServer).GetDeploymentState(ctx, req.(*DeploymentStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageApi_ServiceDesc is the grpc.ServiceDesc for StorageApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StorageApi",
	HandlerType: (*StorageApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateWorkspace",
			Handler:    _StorageApi_UpdateWorkspace_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _StorageApi_UpdateApplication_Handler,
		},
		{
			MethodName: "UpdateWorkload",
			Handler:    _StorageApi_UpdateWorkload_Handler,
		},
		{
			MethodName: "UpdateEnvironment",
			Handler:    _StorageApi_UpdateEnvironment_Handler,
		},
		{
			MethodName: "UpdateDeploymentTarget",
			Handler:    _StorageApi_UpdateDeploymentTarget_Handler,
		},
		{
			MethodName: "UpdateWorkloadVersion",
			Handler:    _StorageApi_UpdateWorkloadVersion_Handler,
		},
		{
			MethodName: "UpdateDeploymentAssignment",
			Handler:    _StorageApi_UpdateDeploymentAssignment_Handler,
		},
		{
			MethodName: "UpdateHost",
			Handler:    _StorageApi_UpdateHost_Handler,
		},
		{
			MethodName: "UpdateReconciler",
			Handler:    _StorageApi_UpdateReconciler_Handler,
		},
		{
			MethodName: "UpdateDeployment",
			Handler:    _StorageApi_UpdateDeployment_Handler,
		},
		{
			MethodName: "GetDeploymentTarget",
			Handler:    _StorageApi_GetDeploymentTarget_Handler,
		},
		{
			MethodName: "GetDeploymentState",
			Handler:    _StorageApi_GetDeploymentState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/storage.proto",
}
